# -*- coding: utf-8 -*-
"""load_model_test_tsne_umap.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u1_ivLfTx4v7HkFTiSCsvIHTAEyiUEYN

# Load Trained Model and Visualize Test Set Embeddings

- Loads a fine-tuned ResNet50 model from Google Drive
- Applies it to a labeled test dataset
- Extracts features and visualizes them using:
  - PCA + t-SNE
  - PCA + UMAP
"""

from google.colab import drive
drive.mount('/content/drive')
!unzip -q "/content/drive/MyDrive/datasets.zip" -d "/content/datasets"

import os
import shutil
import torch
import torch.nn as nn
from torchvision import models, datasets, transforms
from torch.utils.data import DataLoader
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.metrics import classification_report
import umap.umap_ as umap
from tqdm import tqdm

if os.path.exists('/content/datasets/separated_test_dataset/7'):
    os.makedirs('/content/data_excluded', exist_ok=True)
    shutil.move('/content/datasets/separated_test_dataset/7', '/content/data_excluded/7')

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

num_classes = 7
model = models.resnet50(pretrained=False)
model.fc = nn.Linear(model.fc.in_features, num_classes)
model.load_state_dict(torch.load('/content/drive/MyDrive/resnet50_affectnet.pth', map_location=device))
model = model.to(device)
model.eval()
print("✅ Model loaded and ready.")

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225])
])

test_dataset = datasets.ImageFolder('/content/datasets/separated_test_dataset', transform=transform)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)
emotion_map = {0: 'Neutral', 1: 'Happy', 2: 'Sad', 3: 'Surprise', 4: 'Fear', 5: 'Disgust', 6: 'Anger'}

features, labels = [], []

with torch.no_grad():
    for images, lbls in tqdm(test_loader, desc="Extracting features"):
        images = images.to(device)
        x = model.conv1(images)
        x = model.bn1(x)
        x = model.relu(x)
        x = model.layer1(x)
        x = model.layer2(x)
        x = model.layer3(x)
        x = model.layer4(x)
        x = model.avgpool(x)
        x = x.view(x.size(0), -1)
        features.append(x.cpu().numpy())
        labels.extend(lbls.cpu().numpy())

features = np.vstack(features)

pca_umap = PCA(n_components=50)
X_pca_umap = pca_umap.fit_transform(features)

umap_model = umap.UMAP(n_components=2, random_state=42, verbose=True)
X_umap = umap_model.fit_transform(X_pca_umap)

df_umap = pd.DataFrame({
    'x': X_umap[:, 0],
    'y': X_umap[:, 1],
    'emotion': [emotion_map[i] for i in labels]
})

plt.figure(figsize=(8, 6))
sns.set_context("paper", font_scale=1.5)
sns.scatterplot(data=df_umap, x='x', y='y', hue='emotion',
                palette='tab10', s=60, edgecolor='k', alpha=0.8)
plt.title("UMAP (PCA 50D → UMAP 2D) of Test Embeddings")
plt.xlabel("Component 1")
plt.ylabel("Component 2")
plt.tight_layout()
plt.savefig("/content/drive/MyDrive/umap_plot_test.png", dpi=300)
plt.show()

correct = 0
total = 0
model.eval()

with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        _, preds = torch.max(outputs, 1)
        correct += (preds == labels).sum().item()
        total += labels.size(0)

accuracy = correct / total
print(f"✅ Test Accuracy: {accuracy:.4f} ({correct}/{total})")

all_preds = []
all_labels = []

with torch.no_grad():
    for images, labels in test_loader:
        images = images.to(device)
        outputs = model(images)
        _, preds = torch.max(outputs, 1)
        all_preds.extend(preds.cpu().numpy())
        all_labels.extend(labels.numpy())

print(classification_report(all_labels, all_preds, target_names=list(emotion_map.values())))

import matplotlib.pyplot as plt

cm = confusion_matrix(all_labels, all_preds)

disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=list(emotion_map.values()))
fig, ax = plt.subplots(figsize=(8, 6))
disp.plot(ax=ax, cmap='Blues', xticks_rotation=45)
plt.title("Confusion Matrix of Emotion Classification")
plt.tight_layout()
plt.show()
